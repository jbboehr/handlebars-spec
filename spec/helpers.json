[
	{
		"description": "helpers",
		"it": "helper with complex lookup$",
		"template": "{{#goodbyes}}{{{link ../prefix}}}{{/goodbyes}}",
		"data": {
			"prefix": "/root",
			"goodbyes": [
				{
					"text": "Goodbye",
					"url": "goodbye"
				}
			]
		},
		"expected": "<a href=\"/root/goodbye\">Goodbye</a>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (prefix) {\n      return '<a href=\"' + prefix + '/' + this.url + '\">' + this.text + '</a>';\n    }",
				"php": "function($prefix, $options) { return '<a href=\"' . $prefix . '/' . $options->scope['url'] . '\">' . $options->scope['text'] . '</a>'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "helper for raw block gets raw content",
		"template": "{{{{raw}}}} {{test}} {{{{/raw}}}}",
		"data": {
			"test": "hello"
		},
		"expected": " {{test}} ",
		"helpers": {
			"raw": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn();\n      }",
				"php": "function($options) {\n          return $options->fn();\n      }"
			}
		},
		"message": "raw block helper gets raw content"
	},
	{
		"description": "helpers",
		"it": "helper for raw block gets parameters",
		"template": "{{{{raw 1 2 3}}}} {{test}} {{{{/raw}}}}",
		"data": {
			"test": "hello"
		},
		"expected": " {{test}} 123",
		"helpers": {
			"raw": {
				"!code": true,
				"javascript": "function (a, b, c, options) {\n        return options.fn() + a + b + c;\n    }",
				"php": "function($a, $b, $c, $options) {\n        return $options->fn() . $a . $b . $c;\n    }"
			}
		},
		"message": "raw block helper gets raw content"
	},
	{
		"description": "helpers - raw block parsing (with identity helper-function)",
		"it": "helper for nested raw block gets raw content",
		"template": "{{{{identity}}}} {{{{b}}}} {{{{/b}}}} {{{{/identity}}}}",
		"data": {},
		"expected": " {{{{b}}}} {{{{/b}}}} ",
		"helpers": {
			"identity": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn();\n      }",
				"php": "function($options) {\n          return $options->fn();\n      }"
			}
		}
	},
	{
		"description": "helpers - raw block parsing (with identity helper-function)",
		"it": "helper for nested raw block works with empty content",
		"template": "{{{{identity}}}}{{{{/identity}}}}",
		"data": {},
		"expected": "",
		"helpers": {
			"identity": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn();\n      }",
				"php": "function($options) {\n          return $options->fn();\n      }"
			}
		}
	},
	{
		"description": "helpers - raw block parsing (with identity helper-function)",
		"it": "helper for nested raw block closes after first matching close",
		"template": "{{{{identity}}}}abc{{{{/identity}}}} {{{{identity}}}}abc{{{{/identity}}}}",
		"data": {},
		"expected": "abc abc",
		"helpers": {
			"identity": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn();\n      }",
				"php": "function($options) {\n          return $options->fn();\n      }"
			}
		}
	},
	{
		"description": "helpers - raw block parsing (with identity helper-function)",
		"it": "helper for nested raw block throw exception when with missing closing braces",
		"template": "{{{{a}}}} {{{{/a",
		"data": {},
		"exception": true
	},
	{
		"description": "helpers",
		"it": "helper block with identical context",
		"template": "{{#goodbyes}}{{name}}{{/goodbyes}}",
		"data": {
			"name": "Alan"
		},
		"expected": "Goodbye Alan! goodbye Alan! GOODBYE Alan! ",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n      var out = '';\n      var byes = ['Goodbye', 'goodbye', 'GOODBYE'];\n      for (var i = 0, j = byes.length; i < j; i++) {\n        out += byes[i] + ' ' + options.fn(this) + '! ';\n      }\n      return out;\n    }",
				"php": "function($options) {\n      $out = '';\n      $byes = array('Goodbye', 'goodbye', 'GOODBYE');\n      for ($i = 0, $j = count($byes); $i < $j; $i++) {\n        $out .= $byes[$i] . ' ' . $options->fn($options->scope) . '! ';\n      }\n      return $out;\n    }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "helper block with complex lookup expression",
		"template": "{{#goodbyes}}{{../name}}{{/goodbyes}}",
		"data": {
			"name": "Alan"
		},
		"expected": "Goodbye Alan! goodbye Alan! GOODBYE Alan! ",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n      var out = '';\n      var byes = ['Goodbye', 'goodbye', 'GOODBYE'];\n      for (var i = 0, j = byes.length; i < j; i++) {\n        out += byes[i] + ' ' + options.fn({}) + '! ';\n      }\n      return out;\n    }",
				"php": "function($options) {\n$byes = array('Goodbye', 'goodbye', 'GOODBYE');\n$out = '';\nforeach ($byes as $bye) {\n$out .= $bye.' ';\n$out .= $options->fn();\n$out .= '! ';\n}\nreturn $out;\n}"
			}
		}
	},
	{
		"description": "helpers",
		"it": "helper with complex lookup and nested template",
		"template": "{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}",
		"data": {
			"prefix": "/root",
			"goodbyes": [
				{
					"text": "Goodbye",
					"url": "goodbye"
				}
			]
		},
		"expected": "<a href=\"/root/goodbye\">Goodbye</a>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (prefix, options) {\n        return '<a href=\"' + prefix + '/' + this.url + '\">' + options.fn(this) + '</a>';\n    }",
				"php": "function($prefix, $options) { $out = '<a href=\"' . $prefix . '/' . $options->scope['url'] . '\">'; $out .= $options->fn($options->scope); return $out . '</a>'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "helper with complex lookup and nested template in VM+Compiler",
		"template": "{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}",
		"data": {
			"prefix": "/root",
			"goodbyes": [
				{
					"text": "Goodbye",
					"url": "goodbye"
				}
			]
		},
		"expected": "<a href=\"/root/goodbye\">Goodbye</a>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (prefix, options) {\n        return '<a href=\"' + prefix + '/' + this.url + '\">' + options.fn(this) + '</a>';\n    }",
				"php": "function($prefix, $options) { $out = '<a href=\"' . $prefix . '/' . $options->scope['url'] . '\">'; $out .= $options->fn($options->scope); return $out . '</a>'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "helper returning undefined value",
		"template": " {{nothere}}",
		"data": {},
		"expected": " ",
		"helpers": {
			"nothere": {
				"!code": true,
				"javascript": "function () {}",
				"php": "function() {}"
			}
		}
	},
	{
		"description": "helpers",
		"it": "helper returning undefined value",
		"number": "01",
		"template": " {{#nothere}}{{/nothere}}",
		"data": {},
		"expected": " ",
		"helpers": {
			"nothere": {
				"!code": true,
				"javascript": "function () {}",
				"php": "function() {}"
			}
		}
	},
	{
		"description": "helpers",
		"it": "block helper",
		"template": "{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!",
		"data": {
			"world": "world"
		},
		"expected": "GOODBYE! cruel world!",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) { return options.fn({text: 'GOODBYE'}); }",
				"php": "function($options) { return $options->fn(array('text' => 'GOODBYE')); }"
			}
		},
		"message": "Block helper executed"
	},
	{
		"description": "helpers",
		"it": "block helper staying in the same context",
		"template": "{{#form}}<p>{{name}}</p>{{/form}}",
		"data": {
			"name": "Yehuda"
		},
		"expected": "<form><p>Yehuda</p></form>",
		"helpers": {
			"form": {
				"!code": true,
				"javascript": "function (options) { return '<form>' + options.fn(this) + '</form>'; }",
				"php": "function($options) { $out = '<form>'; $out .= $options->fn($options->scope); return $out . '</form>'; }"
			}
		},
		"message": "Block helper executed with current context"
	},
	{
		"description": "helpers",
		"it": "block helper should have context in this",
		"template": "<ul>{{#people}}<li>{{#link}}{{name}}{{/link}}</li>{{/people}}</ul>",
		"data": {
			"people": [
				{
					"name": "Alan",
					"id": 1
				},
				{
					"name": "Yehuda",
					"id": 2
				}
			]
		},
		"expected": "<ul><li><a href=\"/people/1\">Alan</a></li><li><a href=\"/people/2\">Yehuda</a></li></ul>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function link(options) {\n      return '<a href=\"/people/' + this.id + '\">' + options.fn(this) + '</a>';\n    }",
				"php": "function($options) {\n    return '<a href=\"/people/'.$options->scope['id'].'\">' . $options->fn($options->scope) . '</a>';\n}"
			}
		}
	},
	{
		"description": "helpers",
		"it": "block helper for undefined value",
		"template": "{{#empty}}shouldn't render{{/empty}}",
		"data": {},
		"expected": ""
	},
	{
		"description": "helpers",
		"it": "block helper passing a new context",
		"template": "{{#form yehuda}}<p>{{name}}</p>{{/form}}",
		"data": {
			"yehuda": {
				"name": "Yehuda"
			}
		},
		"expected": "<form><p>Yehuda</p></form>",
		"helpers": {
			"form": {
				"!code": true,
				"javascript": "function (context, options) { return '<form>' + options.fn(context) + '</form>'; }",
				"php": "function($context, $options) {\n    $out = '<form>';\n    $out .= $options->fn($context);\n    return $out . '</form>';\n}"
			}
		},
		"message": "Context variable resolved"
	},
	{
		"description": "helpers",
		"it": "block helper passing a complex path context",
		"template": "{{#form yehuda/cat}}<p>{{name}}</p>{{/form}}",
		"data": {
			"yehuda": {
				"name": "Yehuda",
				"cat": {
					"name": "Harold"
				}
			}
		},
		"expected": "<form><p>Harold</p></form>",
		"helpers": {
			"form": {
				"!code": true,
				"javascript": "function (context, options) { return '<form>' + options.fn(context) + '</form>'; }",
				"php": "function($context, $options) {\n    $out = '<form>';\n    $out .= $options->fn($context);\n    return $out . '</form>';\n}"
			}
		},
		"message": "Complex path variable resolved"
	},
	{
		"description": "helpers",
		"it": "nested block helpers",
		"template": "{{#form yehuda}}<p>{{name}}</p>{{#link}}Hello{{/link}}{{/form}}",
		"data": {
			"yehuda": {
				"name": "Yehuda"
			}
		},
		"expected": "<form><p>Yehuda</p><a href=\"Yehuda\">Hello</a></form>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (options) { return '<a href=\"' + this.name + '\">' + options.fn(this) + '</a>'; }",
				"php": "function($options) {\n    $out = '<a href=\"' . $options->scope['name'].'\">';\n    $out .= $options->fn($options->scope);\n    return $out . '</a>';\n}"
			},
			"form": {
				"!code": true,
				"javascript": "function (context, options) { return '<form>' + options.fn(context) + '</form>'; }",
				"php": "function($context, $options) {\n    $out = '<form>';\n    $out .= $options->fn($context);\n    return $out . '</form>';\n}"
			}
		},
		"message": "Both blocks executed"
	},
	{
		"description": "helpers",
		"it": "block helper inverted sections",
		"template": "{{#list people}}{{name}}{{^}}<em>Nobody's here</em>{{/list}}",
		"data": {
			"people": [
				{
					"name": "Alan"
				},
				{
					"name": "Yehuda"
				}
			]
		},
		"expected": "<ul><li>Alan</li><li>Yehuda</li></ul>",
		"helpers": {
			"list": {
				"!code": true,
				"javascript": "function list(context, options) {\n      if (context.length > 0) {\n        var out = '<ul>';\n        for (var i = 0, j = context.length; i < j; i++) {\n          out += '<li>';\n          out += options.fn(context[i]);\n          out += '</li>';\n        }\n        out += '</ul>';\n        return out;\n      } else {\n        return '<p>' + options.inverse(this) + '</p>';\n      }\n    }",
				"php": "function($context, $options) {\n    $out = '';\n    if (count($context) > 0) {\n        $out .= '<ul>';\n        foreach ($context as $row) {\n            $out .= '<li>';\n            $out .= $options->fn($row);\n            $out .= '</li>';\n        }\n        $out .= '</ul>';\n    } elseif (isset($options->inverse)) {\n        $out .= '<p>';\n        $out .= $options->inverse($options->scope);\n        $out .= '</p>';\n    }\n    return $out;\n}"
			}
		},
		"message": "an inverse wrapper is passed in as a new context"
	},
	{
		"description": "helpers",
		"it": "block helper inverted sections",
		"number": "01",
		"template": "{{#list people}}{{name}}{{^}}<em>Nobody's here</em>{{/list}}",
		"data": {
			"people": []
		},
		"expected": "<p><em>Nobody's here</em></p>",
		"helpers": {
			"list": {
				"!code": true,
				"javascript": "function list(context, options) {\n      if (context.length > 0) {\n        var out = '<ul>';\n        for (var i = 0, j = context.length; i < j; i++) {\n          out += '<li>';\n          out += options.fn(context[i]);\n          out += '</li>';\n        }\n        out += '</ul>';\n        return out;\n      } else {\n        return '<p>' + options.inverse(this) + '</p>';\n      }\n    }",
				"php": "function($context, $options) {\n    $out = '';\n    if (count($context) > 0) {\n        $out .= '<ul>';\n        foreach ($context as $row) {\n            $out .= '<li>';\n            $out .= $options->fn($row);\n            $out .= '</li>';\n        }\n        $out .= '</ul>';\n    } elseif (isset($options->inverse)) {\n        $out .= '<p>';\n        $out .= $options->inverse($options->scope);\n        $out .= '</p>';\n    }\n    return $out;\n}"
			}
		},
		"message": "an inverse wrapper can be optionally called"
	},
	{
		"description": "helpers",
		"it": "block helper inverted sections",
		"number": "02",
		"template": "{{#list people}}Hello{{^}}{{message}}{{/list}}",
		"data": {
			"people": [],
			"message": "Nobody's here"
		},
		"expected": "<p>Nobody&#x27;s here</p>",
		"helpers": {
			"list": {
				"!code": true,
				"javascript": "function list(context, options) {\n      if (context.length > 0) {\n        var out = '<ul>';\n        for (var i = 0, j = context.length; i < j; i++) {\n          out += '<li>';\n          out += options.fn(context[i]);\n          out += '</li>';\n        }\n        out += '</ul>';\n        return out;\n      } else {\n        return '<p>' + options.inverse(this) + '</p>';\n      }\n    }",
				"php": "function($context, $options) {\n    $out = '';\n    if (count($context) > 0) {\n        $out .= '<ul>';\n        foreach ($context as $row) {\n            $out .= '<li>';\n            $out .= $options->fn($row);\n            $out .= '</li>';\n        }\n        $out .= '</ul>';\n    } elseif (isset($options->inverse)) {\n        $out .= '<p>';\n        $out .= $options->inverse($options->scope);\n        $out .= '</p>';\n    }\n    return $out;\n}"
			}
		},
		"message": "the context of an inverse is the parent of the block"
	},
	{
		"description": "helpers",
		"it": "pathed lambas with parameters",
		"template": "{{./helper 1}}",
		"data": {
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'winning';\n      }",
				"php": "function() {\n        return 'winning';\n      }"
			}
		},
		"expected": "winning",
		"helpers": {
			"./helper": {
				"!code": true,
				"javascript": "function () { return 'fail'; }",
				"php": "function() { return 'fail'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "pathed lambas with parameters",
		"number": "01",
		"template": "{{hash/helper 1}}",
		"data": {
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'winning';\n      }",
				"php": "function() {\n        return 'winning';\n      }"
			},
			"hash": {
				"helper": {
					"!code": true,
					"javascript": "function () {\n        return 'winning';\n      }",
					"php": "function() {\n        return 'winning';\n      }"
				}
			}
		},
		"expected": "winning",
		"helpers": {
			"./helper": {
				"!code": true,
				"javascript": "function () { return 'fail'; }",
				"php": "function() { return 'fail'; }"
			}
		}
	},
	{
		"description": "helpers - helpers hash",
		"it": "providing a helpers hash",
		"template": "Goodbye {{cruel}} {{world}}!",
		"data": {
			"cruel": "cruel"
		},
		"expected": "Goodbye cruel world!",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world'; }",
				"php": "function() { return 'world'; }"
			}
		},
		"message": "helpers hash is available"
	},
	{
		"description": "helpers - helpers hash",
		"it": "providing a helpers hash",
		"number": "01",
		"template": "Goodbye {{#iter}}{{cruel}} {{world}}{{/iter}}!",
		"data": {
			"iter": [
				{
					"cruel": "cruel"
				}
			]
		},
		"expected": "Goodbye cruel world!",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world'; }",
				"php": "function() { return 'world'; }"
			}
		},
		"message": "helpers hash is available inside other blocks"
	},
	{
		"description": "helpers - helpers hash",
		"it": "in cases of conflict, helpers win",
		"template": "{{{lookup}}}",
		"data": {
			"lookup": "Explicit"
		},
		"expected": "helpers",
		"helpers": {
			"lookup": {
				"!code": true,
				"javascript": "function () { return 'helpers'; }",
				"php": "function() { return 'helpers'; }"
			}
		},
		"message": "helpers hash has precedence escaped expansion"
	},
	{
		"description": "helpers - helpers hash",
		"it": "in cases of conflict, helpers win",
		"number": "01",
		"template": "{{lookup}}",
		"data": {
			"lookup": "Explicit"
		},
		"expected": "helpers",
		"helpers": {
			"lookup": {
				"!code": true,
				"javascript": "function () { return 'helpers'; }",
				"php": "function() { return 'helpers'; }"
			}
		},
		"message": "helpers hash has precedence simple expansion"
	},
	{
		"description": "helpers - helpers hash",
		"it": "the helpers hash is available is nested contexts",
		"template": "{{#outer}}{{#inner}}{{helper}}{{/inner}}{{/outer}}",
		"data": {
			"outer": {
				"inner": {
					"unused": []
				}
			}
		},
		"expected": "helper",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function () { return 'helper'; }",
				"php": "function() { return 'helper'; }"
			}
		},
		"message": "helpers hash is available in nested contexts."
	},
	{
		"description": "helpers - helpers hash",
		"it": "the helper hash should augment the global hash",
		"template": "{{test_helper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}",
		"data": {
			"cruel": "cruel"
		},
		"expected": "found it! Goodbye cruel world!!",
		"helpers": {
			"test_helper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			}
		}
	},
	{
		"description": "helpers - registration",
		"it": "allows multiple globals",
		"template": "{{testHelper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}",
		"data": {
			"cruel": "cruel"
		},
		"expected": "found it! Goodbye cruel world!!",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "decimal number literals work",
		"template": "Message: {{hello -1.2 1.2}}",
		"data": {},
		"expected": "Message: Hello -1.2 1.2 times",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function (times, times2) {\n      if (typeof times !== 'number') { times = 'NaN'; }\n      if (typeof times2 !== 'number') { times2 = 'NaN'; }\n      return 'Hello ' + times + ' ' + times2 + ' times';\n    }",
				"php": "function($times, $times2) {\n    if (!is_numeric($times)) {\n        $times = 'NaN';\n    }\n    if (!is_numeric($times2)) {\n        $times2 = \"NaN\";\n    }\n    return \"Hello $times $times2 times\";\n}"
			}
		},
		"message": "template with a negative integer literal"
	},
	{
		"description": "helpers",
		"it": "negative number literals work",
		"template": "Message: {{hello -12}}",
		"data": {},
		"expected": "Message: Hello -12 times",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function (times) {\n      if (typeof times !== 'number') { times = 'NaN'; }\n      return 'Hello ' + times + ' times';\n    }",
				"php": "function($times) {\n    if(!is_numeric($times)) {\n        $times = \"NaN\";\n    }\n    return \"Hello $times times\";\n}"
			}
		},
		"message": "template with a negative integer literal"
	},
	{
		"description": "helpers - String literal parameters",
		"it": "simple literals work",
		"template": "Message: {{hello \"world\" 12 true false}}",
		"data": {},
		"expected": "Message: Hello world 12 times: true false",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function (param, times, bool1, bool2) {\n        if (typeof times !== 'number') { times = 'NaN'; }\n        if (typeof bool1 !== 'boolean') { bool1 = 'NaB'; }\n        if (typeof bool2 !== 'boolean') { bool2 = 'NaB'; }\n        return 'Hello ' + param + ' ' + times + ' times: ' + bool1 + ' ' + bool2;\n      }",
				"php": "function($param, $times, $bool1, $bool2) {\n    if(!is_numeric($times)) { $times = \"NaN\"; }\n    if(!is_bool($bool1)) {\n        $bool1 = \"NaB\";\n    } else {\n        $bool1 = ($bool1 ? 'true' : 'false');\n    }\n    if(!is_bool($bool2)) {\n        $bool2 = \"NaB\";\n    } else {\n        $bool2 = ($bool2 ? 'true' : 'false');\n    }\n\n    return \"Hello $param $times times: $bool1 $bool2\";\n}"
			}
		},
		"message": "template with a simple String literal"
	},
	{
		"description": "helpers - String literal parameters",
		"it": "using a quote in the middle of a parameter raises an error",
		"template": "Message: {{hello wo\"rld\"}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": true
	},
	{
		"description": "helpers - String literal parameters",
		"it": "escaping a String is possible",
		"template": "Message: {{{hello \"\\\"world\\\"\"}}}",
		"data": {},
		"expected": "Message: Hello \"world\"",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function (param) { return 'Hello ' + param; }",
				"php": "function($param) { return \"Hello \" . $param; }"
			}
		},
		"message": "template with an escaped String literal"
	},
	{
		"description": "helpers - String literal parameters",
		"it": "it works with ' marks",
		"template": "Message: {{{hello \"Alan's world\"}}}",
		"data": {},
		"expected": "Message: Hello Alan's world",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function (param) { return 'Hello ' + param; }",
				"php": "function($param) { return \"Hello \" . $param; }"
			}
		},
		"message": "template with a ' mark"
	},
	{
		"description": "helpers",
		"it": "negative number literals work",
		"number": "01",
		"template": "Message: {{hello -12}}",
		"data": {},
		"expected": "Message: Hello -12 times",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function (times) {\n      if (typeof times !== 'number') { times = 'NaN'; }\n      return 'Hello ' + times + ' times';\n    }",
				"php": "function($times) {\n    if(!is_numeric($times)) {\n        $times = \"NaN\";\n    }\n    return \"Hello $times times\";\n}"
			}
		},
		"message": "template with a negative integer literal"
	},
	{
		"description": "helpers - multiple parameters",
		"it": "simple multi-params work",
		"template": "Message: {{goodbye cruel world}}",
		"data": {
			"cruel": "cruel",
			"world": "world"
		},
		"expected": "Message: Goodbye cruel world",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function (cruel, world) { return 'Goodbye ' + cruel + ' ' + world; }",
				"php": "function($cruel, $world) { return 'Goodbye ' . $cruel . ' ' . $world; }"
			}
		},
		"message": "regular helpers with multiple params"
	},
	{
		"description": "helpers - multiple parameters",
		"it": "block multi-params work",
		"template": "Message: {{#goodbye cruel world}}{{greeting}} {{adj}} {{noun}}{{/goodbye}}",
		"data": {
			"cruel": "cruel",
			"world": "world"
		},
		"expected": "Message: Goodbye cruel world",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function (cruel, world, options) {\n        return options.fn({greeting: 'Goodbye', adj: cruel, noun: world});\n      }",
				"php": "function($cruel, $world, $options) {\n    return $options->fn(array('greeting' => 'Goodbye', 'adj' => 'cruel', 'noun' => 'world'));\n}"
			}
		},
		"message": "block helpers with multiple params"
	},
	{
		"description": "helpers - hash",
		"it": "helpers can take an optional hash",
		"template": "{{goodbye cruel=\"CRUEL\" world=\"WORLD\" times=12}}",
		"data": {},
		"expected": "GOODBYE CRUEL WORLD 12 TIMES",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.hash.world + ' ' + options.hash.times + ' TIMES';\n        }",
				"php": "function($options) {\n    $r = 'GOODBYE ';\n    $r .= $options['hash']['cruel'].' ';\n    $r .= $options['hash']['world'].' ';\n    $r .= $options['hash']['times'].' TIMES';\n\n    return $r;\n}"
			}
		},
		"message": "Helper output hash"
	},
	{
		"description": "helpers - hash",
		"it": "helpers can take an optional hash with booleans",
		"template": "{{goodbye cruel=\"CRUEL\" world=\"WORLD\" print=true}}",
		"data": {},
		"expected": "GOODBYE CRUEL WORLD",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function goodbye(options) {\n        if (options.hash.print === true) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.hash.world;\n        } else if (options.hash.print === false) {\n          return 'NOT PRINTING';\n        } else {\n          return 'THIS SHOULD NOT HAPPEN';\n        }\n      }"
			}
		},
		"message": "Helper output hash"
	},
	{
		"description": "helpers - hash",
		"it": "helpers can take an optional hash with booleans",
		"number": "01",
		"template": "{{goodbye cruel=\"CRUEL\" world=\"WORLD\" print=false}}",
		"data": {},
		"expected": "NOT PRINTING",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function goodbye(options) {\n        if (options.hash.print === true) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.hash.world;\n        } else if (options.hash.print === false) {\n          return 'NOT PRINTING';\n        } else {\n          return 'THIS SHOULD NOT HAPPEN';\n        }\n      }"
			}
		},
		"message": "Boolean helper parameter honored"
	},
	{
		"description": "helpers - hash",
		"it": "block helpers can take an optional hash",
		"template": "{{#goodbye cruel=\"CRUEL\" times=12}}world{{/goodbye}}",
		"data": {},
		"expected": "GOODBYE CRUEL world 12 TIMES",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this) + ' ' + options.hash.times + ' TIMES';\n        }",
				"php": "function($options) {\n    return \"GOODBYE {$options['hash']['cruel']} \" . $options->fn($options->scope) . \" {$options['hash']['times']} TIMES\";\n}"
			}
		},
		"message": "Hash parameters output"
	},
	{
		"description": "helpers - hash",
		"it": "block helpers can take an optional hash with single quoted stings",
		"template": "{{#goodbye cruel=\"CRUEL\" times=12}}world{{/goodbye}}",
		"data": {},
		"expected": "GOODBYE CRUEL world 12 TIMES",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this) + ' ' + options.hash.times + ' TIMES';\n        }",
				"php": "function($options) {\n    return \"GOODBYE {$options['hash']['cruel']} \" . $options->fn($options->scope) . \" {$options['hash']['times']} TIMES\";\n}"
			}
		},
		"message": "Hash parameters output"
	},
	{
		"description": "helpers - hash",
		"it": "block helpers can take an optional hash with booleans",
		"template": "{{#goodbye cruel=\"CRUEL\" print=true}}world{{/goodbye}}",
		"data": {},
		"expected": "GOODBYE CRUEL world",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function goodbye(options) {\n        if (options.hash.print === true) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this);\n        } else if (options.hash.print === false) {\n          return 'NOT PRINTING';\n        } else {\n          return 'THIS SHOULD NOT HAPPEN';\n        }\n      }"
			}
		},
		"message": "Boolean hash parameter honored"
	},
	{
		"description": "helpers - hash",
		"it": "block helpers can take an optional hash with booleans",
		"number": "01",
		"template": "{{#goodbye cruel=\"CRUEL\" print=false}}world{{/goodbye}}",
		"data": {},
		"expected": "NOT PRINTING",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function goodbye(options) {\n        if (options.hash.print === true) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this);\n        } else if (options.hash.print === false) {\n          return 'NOT PRINTING';\n        } else {\n          return 'THIS SHOULD NOT HAPPEN';\n        }\n      }"
			}
		},
		"message": "Boolean hash parameter honored"
	},
	{
		"description": "helpers - helperMissing",
		"it": "if a context is not found, helperMissing is used",
		"template": "{{hello}} {{link_to world}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/Missing helper: \"link_to\"/"
	},
	{
		"description": "helpers - helperMissing",
		"it": "if a context is not found, custom helperMissing is used",
		"template": "{{hello}} {{link_to world}}",
		"data": {
			"hello": "Hello",
			"world": "world"
		},
		"expected": "Hello <a>world</a>",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function (mesg, options) {\n          if (options.name === 'link_to') {\n            return new Handlebars.SafeString('<a>' + mesg + '</a>');\n          }\n        }",
				"php": "function($mesg, $options = null) {\n          if($options && $options['name'] === \"link_to\") {\n            return new SafeString(\"<a>\" . $mesg . \"</a>\");\n          }\n        }"
			}
		}
	},
	{
		"description": "helpers - helperMissing",
		"it": "if a value is not found, custom helperMissing is used",
		"template": "{{hello}} {{link_to}}",
		"data": {
			"hello": "Hello",
			"world": "world"
		},
		"expected": "Hello <a>winning</a>",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function (options) {\n          if (options.name === 'link_to') {\n            return new Handlebars.SafeString('<a>winning</a>');\n          }\n        }",
				"php": "function($options) {\n          if($options['name'] === \"link_to\") {\n            return new SafeString(\"<a>winning</a>\");\n          }\n        }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Known helper should render helper",
		"template": "{{hello}}",
		"data": {},
		"expected": "foo",
		"compileOptions": {
			"knownHelpers": {
				"hello": true
			}
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function () {\n          return 'foo';\n        }",
				"php": "function() {\n          return 'foo';\n        }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Unknown helper in knownHelpers only mode should be passed as undefined",
		"template": "{{typeof hello}}",
		"data": {},
		"expected": "undefined",
		"compileOptions": {
			"knownHelpers": {
				"typeof": true
			},
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"typeof": {
				"!code": true,
				"javascript": "function (arg) { return typeof arg; }",
				"php": "function($arg) { return $arg === null ? 'undefined' : gettype($arg); }"
			},
			"hello": {
				"!code": true,
				"javascript": "function () {\n          return 'foo';\n        }",
				"php": "function() {\n          return 'foo';\n        }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Builtin helpers available in knownHelpers only mode",
		"template": "{{#unless foo}}bar{{/unless}}",
		"data": {},
		"expected": "bar",
		"compileOptions": {
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Field lookup works in knownHelpers only mode",
		"template": "{{foo}}",
		"data": {
			"foo": "bar"
		},
		"expected": "bar",
		"compileOptions": {
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Conditional blocks work in knownHelpers only mode",
		"template": "{{#foo}}bar{{/foo}}",
		"data": {
			"foo": "baz"
		},
		"expected": "bar",
		"compileOptions": {
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Invert blocks work in knownHelpers only mode",
		"template": "{{^foo}}bar{{/foo}}",
		"data": {
			"foo": false
		},
		"expected": "bar",
		"compileOptions": {
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Functions are bound to the context in knownHelpers only mode",
		"template": "{{foo}}",
		"data": {
			"foo": {
				"!code": true,
				"javascript": "function () { return this.bar; }",
				"php": "function($context) { return $context['bar']; }"
			},
			"bar": "bar"
		},
		"expected": "bar",
		"compileOptions": {
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers - knownHelpers",
		"it": "Unknown helper call in knownHelpers only mode should throw",
		"template": "{{typeof hello}}",
		"data": {},
		"compileOptions": {
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": true
	},
	{
		"description": "helpers - blockHelperMissing",
		"it": "lambdas are resolved by blockHelperMissing, not handlebars proper",
		"template": "{{#truthy}}yep{{/truthy}}",
		"data": {
			"truthy": {
				"!code": true,
				"javascript": "function () {\n        return true;\n      }",
				"php": "function() {\n        return true;\n      }"
			}
		},
		"expected": "yep",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers - blockHelperMissing",
		"it": "lambdas resolved by blockHelperMissing are bound to the context",
		"template": "{{#truthy}}yep{{/truthy}}",
		"data": {
			"truthy": {
				"!code": true,
				"javascript": "function () { return this.truthiness(); }",
				"php": "function($options) { return $options->scope['truthiness'](); }"
			},
			"truthiness": {
				"!code": true,
				"javascript": "function () { return false; }",
				"php": "function() { return false; }"
			}
		},
		"expected": "",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include in ambiguous mustache calls",
		"template": "{{helper}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include in helper mustache calls",
		"template": "{{helper 1}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include in ambiguous block calls",
		"template": "{{#helper}}{{/helper}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include in simple block calls",
		"template": "{{#./helper}}{{/./helper}}",
		"data": {},
		"expected": "missing: ./helper",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include in helper block calls",
		"template": "{{#helper 1}}{{/helper}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include in known helper calls",
		"template": "{{helper}}",
		"data": {},
		"expected": "ran: helper",
		"compileOptions": {
			"knownHelpers": {
				"helper": true
			},
			"knownHelpersOnly": true
		},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include full id",
		"template": "{{#foo.helper}}{{/foo.helper}}",
		"data": {
			"foo": {}
		},
		"expected": "missing: foo.helper",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name field",
		"it": "should include full id if a hash is passed",
		"template": "{{#foo.helper bar=baz}}{{/foo.helper}}",
		"data": {
			"foo": {}
		},
		"expected": "helper missing: foo.helper",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]['name'];\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }",
				"php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]['name'];\n      }"
			}
		}
	},
	{
		"description": "helpers - name conflicts",
		"it": "helpers take precedence over same-named context properties",
		"template": "{{goodbye}} {{cruel world}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "GOODBYE cruel WORLD",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function () {\n          return this.goodbye.toUpperCase();\n        }",
				"php": "function($options, $scope) {\n          return strtoupper($scope['goodbye']);\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }",
				"php": "function($world) {\n          return \"cruel \" . strtoupper($world);\n        }"
			}
		},
		"message": "Helper executed"
	},
	{
		"description": "helpers - name conflicts",
		"it": "helpers take precedence over same-named context properties$",
		"template": "{{#goodbye}} {{cruel world}}{{/goodbye}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "GOODBYE cruel WORLD",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return this.goodbye.toUpperCase() + options.fn(this);\n        }",
				"php": "function($options) {\n          return strtoupper($options->scope['goodbye']) . $options->fn($options->scope);\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }",
				"php": "function($world) {\n          return \"cruel \" . strtoupper($world);\n        }"
			}
		},
		"message": "Helper executed"
	},
	{
		"description": "helpers - name conflicts",
		"it": "Scoped names take precedence over helpers",
		"template": "{{this.goodbye}} {{cruel world}} {{cruel this.goodbye}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "goodbye cruel WORLD cruel GOODBYE",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function () {\n          return this.goodbye.toUpperCase();\n        }",
				"php": "function($options, $scope) {\n          return strtoupper($scope['goodbye']);\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }",
				"php": "function($world) {\n          return \"cruel \" . strtoupper($world);\n        }"
			}
		},
		"message": "Helper not executed"
	},
	{
		"description": "helpers - name conflicts",
		"it": "Scoped names take precedence over block helpers",
		"template": "{{#goodbye}} {{cruel world}}{{/goodbye}} {{this.goodbye}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "GOODBYE cruel WORLD goodbye",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return this.goodbye.toUpperCase() + options.fn(this);\n        }",
				"php": "function($options) {\n          return strtoupper($options->scope['goodbye']) . $options->fn($options->scope);\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }",
				"php": "function($world) {\n          return \"cruel \" . strtoupper($world);\n        }"
			}
		},
		"message": "Helper executed"
	},
	{
		"description": "helpers - block params",
		"it": "should take presedence over context values",
		"template": "{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{value}}",
		"data": {
			"value": "foo"
		},
		"expected": "1foo",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn({value: 'bar'}, {blockParams: [1, 2]});\n        }",
				"php": "function($options) {\n          return $options->fn(array('value' => 'bar'), array('blockParams' => array(1, 2)));\n        }"
			}
		}
	},
	{
		"description": "helpers - block params",
		"it": "should take presedence over helper values",
		"template": "{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{value}}",
		"data": {},
		"expected": "1foo",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"value": {
				"!code": true,
				"javascript": "function () {\n          return 'foo';\n        }",
				"php": "function() {\n          return 'foo';\n        }"
			},
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn({}, {blockParams: [1, 2]});\n        }",
				"php": "function($options) {\n          return $options->fn(array(), array('blockParams' => array(1, 2)));\n        }"
			}
		}
	},
	{
		"description": "helpers - block params",
		"it": "should not take presedence over pathed values",
		"template": "{{#goodbyes as |value|}}{{./value}}{{/goodbyes}}{{value}}",
		"data": {
			"value": "bar"
		},
		"expected": "barfoo",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"value": {
				"!code": true,
				"javascript": "function () {\n          return 'foo';\n        }",
				"php": "function() {\n          return 'foo';\n        }"
			},
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn(this, {blockParams: [1, 2]});\n        }",
				"php": "function($options) {\n          return $options->fn($options->scope, array('blockParams' => array(1, 2)));\n        }"
			}
		}
	},
	{
		"description": "helpers - block params",
		"it": "should take presednece over parent block params",
		"template": "{{#goodbyes as |value|}}{{#goodbyes}}{{value}}{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{/goodbyes}}{{/goodbyes}}{{value}}",
		"data": {
			"value": "foo"
		},
		"expected": "13foo",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          if( typeof value === 'undefined' ) { value = 1; } return options.fn({value: 'bar'}, {blockParams: options.fn.blockParams === 1 ? [global.value++, global.value++] : undefined});\n        }"
			}
		}
	},
	{
		"description": "helpers - block params",
		"it": "should allow block params on chained helpers",
		"template": "{{#if bar}}{{else goodbyes as |value|}}{{value}}{{/if}}{{value}}",
		"data": {
			"value": "foo"
		},
		"expected": "1foo",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			},
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn({value: 'bar'}, {blockParams: [1, 2]});\n        }",
				"php": "function($options) {\n          return $options->fn(array('value' => 'bar'), array('blockParams' => array(1, 2)));\n        }"
			}
		}
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "if helper - too few arguments",
		"template": "{{#if}}{{/if}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#if requires exactly one argument/"
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "if helper - too many arguments, string",
		"template": "{{#if test \"string\"}}{{/if}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#if requires exactly one argument/"
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "if helper - too many arguments, undefined",
		"template": "{{#if test undefined}}{{/if}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#if requires exactly one argument/"
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "if helper - too many arguments, null",
		"template": "{{#if test null}}{{/if}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#if requires exactly one argument/"
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "unless helper - too few arguments",
		"template": "{{#unless}}{{/unless}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#unless requires exactly one argument/"
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "unless helper - too many arguments",
		"template": "{{#unless test null}}{{/unless}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#unless requires exactly one argument/"
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "with helper - too few arguments",
		"template": "{{#with}}{{/with}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#with requires exactly one argument/"
	},
	{
		"description": "helpers - built-in helpers malformed arguments ",
		"it": "with helper - too many arguments",
		"template": "{{#with test \"string\"}}{{/with}}",
		"data": {},
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }",
				"php": "function() { return 'found it!'; }"
			}
		},
		"exception": "/#with requires exactly one argument/"
	},
	{
		"description": "helpers - the lookupProperty-option",
		"it": "should be passed to custom helpers",
		"template": "{{testHelper}}",
		"data": {
			"testProperty": "abc"
		},
		"expected": "abc",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }",
				"php": "function() { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function testHelper(options) {\n          return options.lookupProperty(this, 'testProperty');\n        }"
			}
		}
	}
]