[
	{
		"description": "blocks",
		"it": "array",
		"template": "{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!",
		"data": {
			"goodbyes": [
				{
					"text": "goodbye"
				},
				{
					"text": "Goodbye"
				},
				{
					"text": "GOODBYE"
				}
			],
			"world": "world"
		},
		"expected": "goodbye! Goodbye! GOODBYE! cruel world!",
		"message": "Arrays iterate over the contents when not empty"
	},
	{
		"description": "blocks",
		"it": "array",
		"number": "01",
		"template": "{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!",
		"data": {
			"goodbyes": [],
			"world": "world"
		},
		"expected": "cruel world!",
		"message": "Arrays ignore the contents when empty"
	},
	{
		"description": "blocks",
		"it": "array without data",
		"template": "{{#goodbyes}}{{text}}{{/goodbyes}} {{#goodbyes}}{{text}}{{/goodbyes}}",
		"data": {
			"goodbyes": [
				{
					"text": "goodbye"
				},
				{
					"text": "Goodbye"
				},
				{
					"text": "GOODBYE"
				}
			],
			"world": "world"
		},
		"expected": "goodbyeGoodbyeGOODBYE goodbyeGoodbyeGOODBYE",
		"compileOptions": {}
	},
	{
		"description": "blocks",
		"it": "array with @index",
		"template": "{{#goodbyes}}{{@index}}. {{text}}! {{/goodbyes}}cruel {{world}}!",
		"data": {
			"goodbyes": [
				{
					"text": "goodbye"
				},
				{
					"text": "Goodbye"
				},
				{
					"text": "GOODBYE"
				}
			],
			"world": "world"
		},
		"expected": "0. goodbye! 1. Goodbye! 2. GOODBYE! cruel world!",
		"message": "The @index variable is used"
	},
	{
		"description": "blocks",
		"it": "empty block",
		"template": "{{#goodbyes}}{{/goodbyes}}cruel {{world}}!",
		"data": {
			"goodbyes": [
				{
					"text": "goodbye"
				},
				{
					"text": "Goodbye"
				},
				{
					"text": "GOODBYE"
				}
			],
			"world": "world"
		},
		"expected": "cruel world!",
		"message": "Arrays iterate over the contents when not empty"
	},
	{
		"description": "blocks",
		"it": "empty block",
		"number": "01",
		"template": "{{#goodbyes}}{{/goodbyes}}cruel {{world}}!",
		"data": {
			"goodbyes": [],
			"world": "world"
		},
		"expected": "cruel world!",
		"message": "Arrays ignore the contents when empty"
	},
	{
		"description": "blocks",
		"it": "block with complex lookup",
		"template": "{{#goodbyes}}{{text}} cruel {{../name}}! {{/goodbyes}}",
		"data": {
			"name": "Alan",
			"goodbyes": [
				{
					"text": "goodbye"
				},
				{
					"text": "Goodbye"
				},
				{
					"text": "GOODBYE"
				}
			]
		},
		"expected": "goodbye cruel Alan! Goodbye cruel Alan! GOODBYE cruel Alan! ",
		"message": "Templates can access variables in contexts up the stack with relative path syntax"
	},
	{
		"description": "blocks",
		"it": "multiple blocks with complex lookup",
		"template": "{{#goodbyes}}{{../name}}{{../name}}{{/goodbyes}}",
		"data": {
			"name": "Alan",
			"goodbyes": [
				{
					"text": "goodbye"
				},
				{
					"text": "Goodbye"
				},
				{
					"text": "GOODBYE"
				}
			]
		},
		"expected": "AlanAlanAlanAlanAlanAlan"
	},
	{
		"description": "blocks",
		"it": "block with complex lookup using nested context",
		"template": "{{#goodbyes}}{{text}} cruel {{foo/../name}}! {{/goodbyes}}",
		"data": {},
		"exception": true
	},
	{
		"description": "blocks",
		"it": "block with deep nested complex lookup",
		"template": "{{#outer}}Goodbye {{#inner}}cruel {{../sibling}} {{../../omg}}{{/inner}}{{/outer}}",
		"data": {
			"omg": "OMG!",
			"outer": [
				{
					"sibling": "sad",
					"inner": [
						{
							"text": "goodbye"
						}
					]
				}
			]
		},
		"expected": "Goodbye cruel sad OMG!"
	},
	{
		"description": "blocks",
		"it": "works with cached blocks",
		"template": "{{#each person}}{{#with .}}{{first}} {{last}}{{/with}}{{/each}}",
		"data": {
			"person": [
				{
					"first": "Alan",
					"last": "Johnson"
				},
				{
					"first": "Alan",
					"last": "Johnson"
				}
			]
		},
		"expected": "Alan JohnsonAlan Johnson",
		"compileOptions": {
			"data": false
		}
	},
	{
		"description": "blocks - inverted sections",
		"it": "inverted sections with unset value",
		"template": "{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}",
		"data": {},
		"expected": "Right On!",
		"message": "Inverted section rendered when value isn't set."
	},
	{
		"description": "blocks - inverted sections",
		"it": "inverted section with false value",
		"template": "{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}",
		"data": {
			"goodbyes": false
		},
		"expected": "Right On!",
		"message": "Inverted section rendered when value is false."
	},
	{
		"description": "blocks - inverted sections",
		"it": "inverted section with empty set",
		"template": "{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}",
		"data": {
			"goodbyes": []
		},
		"expected": "Right On!",
		"message": "Inverted section rendered when value is empty set."
	},
	{
		"description": "blocks - inverted sections",
		"it": "block inverted sections",
		"template": "{{#people}}{{name}}{{^}}{{none}}{{/people}}",
		"data": {
			"none": "No people"
		},
		"expected": "No people"
	},
	{
		"description": "blocks - inverted sections",
		"it": "chained inverted sections",
		"template": "{{#people}}{{name}}{{else if none}}{{none}}{{/people}}",
		"data": {
			"none": "No people"
		},
		"expected": "No people"
	},
	{
		"description": "blocks - inverted sections",
		"it": "chained inverted sections",
		"number": "01",
		"template": "{{#people}}{{name}}{{else if nothere}}fail{{else unless nothere}}{{none}}{{/people}}",
		"data": {
			"none": "No people"
		},
		"expected": "No people"
	},
	{
		"description": "blocks - inverted sections",
		"it": "chained inverted sections",
		"number": "02",
		"template": "{{#people}}{{name}}{{else if none}}{{none}}{{else}}fail{{/people}}",
		"data": {
			"none": "No people"
		},
		"expected": "No people"
	},
	{
		"description": "blocks - inverted sections",
		"it": "chained inverted sections with mismatch",
		"template": "{{#people}}{{name}}{{else if none}}{{none}}{{/if}}",
		"data": {},
		"exception": true
	},
	{
		"description": "blocks - inverted sections",
		"it": "block inverted sections with empty arrays",
		"template": "{{#people}}{{name}}{{^}}{{none}}{{/people}}",
		"data": {
			"none": "No people",
			"people": []
		},
		"expected": "No people"
	},
	{
		"description": "blocks - standalone sections",
		"it": "block standalone else sections",
		"template": "{{#people}}\n{{name}}\n{{^}}\n{{none}}\n{{/people}}\n",
		"data": {
			"none": "No people"
		},
		"expected": "No people\n"
	},
	{
		"description": "blocks - standalone sections",
		"it": "block standalone else sections",
		"number": "01",
		"template": "{{#none}}\n{{.}}\n{{^}}\n{{none}}\n{{/none}}\n",
		"data": {
			"none": "No people"
		},
		"expected": "No people\n"
	},
	{
		"description": "blocks - standalone sections",
		"it": "block standalone else sections",
		"number": "02",
		"template": "{{#people}}\n{{name}}\n{{^}}\n{{none}}\n{{/people}}\n",
		"data": {
			"none": "No people"
		},
		"expected": "No people\n"
	},
	{
		"description": "blocks - standalone sections",
		"it": "block standalone else sections can be disabled",
		"template": "{{#people}}\n{{name}}\n{{^}}\n{{none}}\n{{/people}}\n",
		"data": {
			"none": "No people"
		},
		"expected": "\nNo people\n\n",
		"compileOptions": {
			"ignoreStandalone": true
		}
	},
	{
		"description": "blocks - standalone sections",
		"it": "block standalone else sections can be disabled",
		"number": "01",
		"template": "{{#none}}\n{{.}}\n{{^}}\nFail\n{{/none}}\n",
		"data": {
			"none": "No people"
		},
		"expected": "\nNo people\n\n",
		"compileOptions": {
			"ignoreStandalone": true
		}
	},
	{
		"description": "blocks - standalone sections",
		"it": "block standalone chained else sections",
		"template": "{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{/people}}\n",
		"data": {
			"none": "No people"
		},
		"expected": "No people\n"
	},
	{
		"description": "blocks - standalone sections",
		"it": "block standalone chained else sections",
		"number": "01",
		"template": "{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{^}}\n{{/people}}\n",
		"data": {
			"none": "No people"
		},
		"expected": "No people\n"
	},
	{
		"description": "blocks - standalone sections",
		"it": "should handle nesting",
		"template": "{{#data}}\n{{#if true}}\n{{.}}\n{{/if}}\n{{/data}}\nOK.",
		"data": {
			"data": [
				1,
				3,
				5
			]
		},
		"expected": "1\n3\n5\nOK."
	},
	{
		"description": "blocks - compat mode",
		"it": "block with deep recursive lookup lookup",
		"template": "{{#outer}}Goodbye {{#inner}}cruel {{omg}}{{/inner}}{{/outer}}",
		"data": {
			"omg": "OMG!",
			"outer": [
				{
					"inner": [
						{
							"text": "goodbye"
						}
					]
				}
			]
		},
		"expected": "Goodbye cruel OMG!",
		"compileOptions": {
			"compat": true
		}
	},
	{
		"description": "blocks - compat mode",
		"it": "block with deep recursive pathed lookup",
		"template": "{{#outer}}Goodbye {{#inner}}cruel {{omg.yes}}{{/inner}}{{/outer}}",
		"data": {
			"omg": {
				"yes": "OMG!"
			},
			"outer": [
				{
					"inner": [
						{
							"yes": "no",
							"text": "goodbye"
						}
					]
				}
			]
		},
		"expected": "Goodbye cruel OMG!",
		"compileOptions": {
			"compat": true
		}
	},
	{
		"description": "blocks - compat mode",
		"it": "block with missed recursive lookup",
		"template": "{{#outer}}Goodbye {{#inner}}cruel {{omg.yes}}{{/inner}}{{/outer}}",
		"data": {
			"omg": {
				"no": "OMG!"
			},
			"outer": [
				{
					"inner": [
						{
							"yes": "no",
							"text": "goodbye"
						}
					]
				}
			]
		},
		"expected": "Goodbye cruel ",
		"compileOptions": {
			"compat": true
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should apply mustache decorators",
		"template": "{{#helper}}{{*decorator}}{{/helper}}",
		"data": {},
		"expected": "success",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn.run;\n        }",
				"php": "function($options) {\n          return $options->fn->run;\n        }"
			}
		},
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn) {\n          fn.run = 'success';\n          return fn;\n        }",
				"php": "function($fn) {\n          $fn->run = 'success';\n          return $fn;\n        }"
			}
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should apply allow undefined return",
		"template": "{{#helper}}{{*decorator}}suc{{/helper}}",
		"data": {},
		"expected": "success",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn() + options.fn.run;\n        }",
				"php": "function($options) {\n          return $options->fn() . $options->fn->run;\n        }"
			}
		},
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn) {\n          fn.run = 'cess';\n        }",
				"php": "function($fn) {\n          $fn->run = 'cess';\n        }"
			}
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should apply block decorators",
		"template": "{{#helper}}{{#*decorator}}success{{/decorator}}{{/helper}}",
		"data": {},
		"expected": "success",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn.run;\n        }",
				"php": "function($options) {\n          return $options->fn->run;\n        }"
			}
		},
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n          fn.run = options.fn();\n          return fn;\n        }",
				"php": "function($fn, $props, $container, $options) {\n          $fn->run = $options->fn();\n          return $fn;\n        }"
			}
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should support nested decorators",
		"template": "{{#helper}}{{#*decorator}}{{#*nested}}suc{{/nested}}cess{{/decorator}}{{/helper}}",
		"data": {},
		"expected": "success",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn.run;\n        }",
				"php": "function($options) {\n          return $options->fn->run;\n        }"
			}
		},
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n          fn.run = options.fn.nested + options.fn();\n          return fn;\n        }",
				"php": "function($fn, $props, $container, $options) {\n          $fn->run = $options->fn->nested . $options->fn();\n          return $fn;\n        }"
			},
			"nested": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n          props.nested = options.fn();\n        }",
				"php": "function($fn, $props, $container, $options) {\n          $props->nested = $options->fn();\n        }"
			}
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should apply multiple decorators",
		"template": "{{#helper}}{{#*decorator}}suc{{/decorator}}{{#*decorator}}cess{{/decorator}}{{/helper}}",
		"data": {},
		"expected": "success",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn.run;\n        }",
				"php": "function($options) {\n          return $options->fn->run;\n        }"
			}
		},
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n          fn.run = (fn.run || '') + options.fn();\n          return fn;\n        }",
				"php": "function($fn, $props, $container, $options) {\n          $fn->run = (isset($fn->run) ? $fn->run : '') . $options->fn();\n          return $fn;\n        }"
			}
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should access parent variables",
		"template": "{{#helper}}{{*decorator foo}}{{/helper}}",
		"data": {
			"foo": "success"
		},
		"expected": "success",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn.run;\n        }",
				"php": "function($options) {\n          return $options->fn->run;\n        }"
			}
		},
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n          fn.run = options.args;\n          return fn;\n        }",
				"php": "function($fn, $props, $container, $options) {\n          $fn->run = $options->args;\n          return $fn;\n        }"
			}
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should work with root program",
		"template": "{{*decorator \"success\"}}",
		"data": {
			"foo": "success"
		},
		"expected": "",
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n          equals(options.args[0], 'success');\n          run = true;\n          return fn;\n        }",
				"php": "function($fn, $props, $container, $options) {\n          assert('$options->args[0] === \"success\"');\n          return $fn;\n        }"
			}
		}
	},
	{
		"description": "blocks - decorators",
		"it": "should fail when accessing variables from root",
		"template": "{{*decorator foo}}",
		"data": {
			"foo": "fail"
		},
		"expected": "",
		"decorators": {
			"decorator": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n          equals(options.args[0], undefined);\n          global.run = true;\n          return fn;\n        }"
			}
		}
	}
]