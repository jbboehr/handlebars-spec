[
	{
		"description": "Regressions",
		"it": "GH-94: Cannot read property of undefined",
		"template": "{{#books}}{{title}}{{author.name}}{{/books}}",
		"data": {
			"books": [
				{
					"title": "The origin of species",
					"author": {
						"name": "Charles Darwin"
					}
				},
				{
					"title": "Lazarillo de Tormes"
				}
			]
		},
		"expected": "The origin of speciesCharles DarwinLazarillo de Tormes",
		"message": "Renders without an undefined property error"
	},
	{
		"description": "Regressions",
		"it": "GH-150: Inverted sections print when they shouldn't",
		"template": "{{^set}}not set{{/set}} :: {{#set}}set{{/set}}",
		"data": {},
		"expected": "not set :: ",
		"message": "inverted sections run when property isn't present in context"
	},
	{
		"description": "Regressions",
		"it": "GH-150: Inverted sections print when they shouldn't",
		"number": "01",
		"template": "{{^set}}not set{{/set}} :: {{#set}}set{{/set}}",
		"data": {
			"set": null
		},
		"expected": "not set :: ",
		"message": "inverted sections run when property is undefined"
	},
	{
		"description": "Regressions",
		"it": "GH-150: Inverted sections print when they shouldn't",
		"number": "02",
		"template": "{{^set}}not set{{/set}} :: {{#set}}set{{/set}}",
		"data": {
			"set": false
		},
		"expected": "not set :: ",
		"message": "inverted sections run when property is false"
	},
	{
		"description": "Regressions",
		"it": "GH-150: Inverted sections print when they shouldn't",
		"number": "03",
		"template": "{{^set}}not set{{/set}} :: {{#set}}set{{/set}}",
		"data": {
			"set": true
		},
		"expected": " :: set",
		"message": "inverted sections don't run when property is true"
	},
	{
		"description": "Regressions",
		"it": "GH-158: Using array index twice, breaks the template",
		"template": "{{arr.[0]}}, {{arr.[1]}}",
		"data": {
			"arr": [
				1,
				2
			]
		},
		"expected": "1, 2",
		"message": "it works as expected"
	},
	{
		"description": "Regressions",
		"it": "bug reported by @fat where lambdas weren't being properly resolved",
		"template": "<strong>This is a slightly more complicated {{thing}}.</strong>.\n{{! Just ignore this business. }}\nCheck this out:\n{{#hasThings}}\n<ul>\n{{#things}}\n<li class={{className}}>{{word}}</li>\n{{/things}}</ul>.\n{{/hasThings}}\n{{^hasThings}}\n\n<small>Nothing to check out...</small>\n{{/hasThings}}",
		"data": {
			"thing": {
				"!code": true,
				"javascript": "function () {\n        return 'blah';\n      }",
				"php": "function() {\n        return \"blah\";\n      }"
			},
			"things": [
				{
					"className": "one",
					"word": "@fat"
				},
				{
					"className": "two",
					"word": "@dhg"
				},
				{
					"className": "three",
					"word": "@sayrer"
				}
			],
			"hasThings": {
				"!code": true,
				"javascript": "function () {\n        return true;\n      }",
				"php": "function() {\n        return true;\n      }"
			}
		},
		"expected": "<strong>This is a slightly more complicated blah.</strong>.\nCheck this out:\n<ul>\n<li class=one>@fat</li>\n<li class=two>@dhg</li>\n<li class=three>@sayrer</li>\n</ul>.\n"
	},
	{
		"description": "Regressions",
		"it": "GH-408: Multiple loops fail",
		"template": "{{#.}}{{name}}{{/.}}{{#.}}{{name}}{{/.}}{{#.}}{{name}}{{/.}}",
		"data": [
			{
				"name": "John Doe",
				"location": {
					"city": "Chicago"
				}
			},
			{
				"name": "Jane Doe",
				"location": {
					"city": "New York"
				}
			}
		],
		"expected": "John DoeJane DoeJohn DoeJane DoeJohn DoeJane Doe",
		"message": "It should output multiple times"
	},
	{
		"description": "Regressions",
		"it": "GS-428: Nested if else rendering",
		"template": "{{#inverse}} {{#blk}} Unexpected {{/blk}} {{else}}  {{#blk}} Expected {{/blk}} {{/inverse}}",
		"data": {},
		"expected": "   Expected  ",
		"helpers": {
			"blk": {
				"!code": true,
				"javascript": "function (block) { return block.fn(''); }",
				"php": "function($block) { return $block/*['fn']*/->fn(''); }"
			},
			"inverse": {
				"!code": true,
				"javascript": "function (block) { return block.inverse(''); }",
				"php": "function($block) { return $block/*['inverse']*/->inverse(''); }"
			}
		}
	},
	{
		"description": "Regressions",
		"it": "GS-428: Nested if else rendering",
		"number": "01",
		"template": "{{#inverse}} {{#blk}} Unexpected {{/blk}} {{else}} {{#blk}} Expected {{/blk}} {{/inverse}}",
		"data": {},
		"expected": "  Expected  ",
		"helpers": {
			"blk": {
				"!code": true,
				"javascript": "function (block) { return block.fn(''); }",
				"php": "function($block) { return $block/*['fn']*/->fn(''); }"
			},
			"inverse": {
				"!code": true,
				"javascript": "function (block) { return block.inverse(''); }",
				"php": "function($block) { return $block/*['inverse']*/->inverse(''); }"
			}
		}
	},
	{
		"description": "Regressions",
		"it": "GH-458: Scoped this identifier",
		"template": "{{./foo}}",
		"data": {
			"foo": "bar"
		},
		"expected": "bar"
	},
	{
		"description": "Regressions",
		"it": "GH-375: Unicode line terminators",
		"template": " ",
		"data": {},
		"expected": " "
	},
	{
		"description": "Regressions",
		"it": "GH-534: Object prototype aliases",
		"template": "{{foo}}",
		"data": {
			"foo": "bar"
		},
		"expected": "bar"
	},
	{
		"description": "Regressions",
		"it": "GH-437: Matching escaping",
		"template": "{{{a}}",
		"data": {},
		"exception": "/Parse error on/"
	},
	{
		"description": "Regressions",
		"it": "GH-437: Matching escaping",
		"number": "01",
		"template": "{{a}}}",
		"data": {},
		"exception": "/Parse error on/"
	},
	{
		"description": "Regressions",
		"it": "GH-676: Using array in escaping mustache fails",
		"template": "{{arr}}",
		"data": {
			"arr": [
				1,
				2
			]
		},
		"expected": "1,2",
		"message": "it works as expected"
	},
	{
		"description": "Regressions",
		"it": "Mustache man page",
		"template": "Hello {{name}}. You have just won ${{value}}!{{#in_ca}} Well, ${{taxed_value}}, after taxes.{{/in_ca}}",
		"data": {
			"name": "Chris",
			"value": 10000,
			"taxed_value": 6000,
			"in_ca": true
		},
		"expected": "Hello Chris. You have just won $10000! Well, $6000, after taxes.",
		"message": "the hello world mustache example works"
	},
	{
		"description": "Regressions",
		"it": "GH-731: zero context rendering",
		"template": "{{#foo}} This is {{bar}} ~ {{/foo}}",
		"data": {
			"foo": 0,
			"bar": "OK"
		},
		"expected": " This is  ~ "
	},
	{
		"description": "Regressions",
		"it": "GH-820: zero pathed rendering",
		"template": "{{foo.bar}}",
		"data": {
			"foo": 0
		},
		"expected": ""
	},
	{
		"description": "Regressions",
		"it": "GH-837: undefined values for helpers",
		"template": "{{str bar.baz}}",
		"data": {},
		"expected": "undefined",
		"helpers": {
			"str": {
				"!code": true,
				"javascript": "function (value) { return value + ''; }",
				"php": "function($value) { return $value === null ? 'undefined' : (string) $value; }"
			}
		}
	},
	{
		"description": "Regressions",
		"it": "GH-926: Depths and de-dupe",
		"template": "{{#if dater}}{{#each data}}{{../name}}{{/each}}{{else}}{{#each notData}}{{../name}}{{/each}}{{/if}}",
		"data": {
			"name": "foo",
			"data": [
				1
			],
			"notData": [
				1
			]
		},
		"expected": "foo"
	},
	{
		"description": "Regressions",
		"it": "GH-1021: Each empty string key",
		"template": "{{#each data}}Key: {{@key}}\n{{/each}}",
		"data": {
			"data": {
				"": "foo",
				"name": "Chris",
				"value": 10000
			}
		},
		"expected": "Key: \nKey: name\nKey: value\n"
	},
	{
		"description": "Regressions",
		"it": "GH-1054: Should handle simple safe string responses",
		"template": "{{#wrap}}{{>partial}}{{/wrap}}",
		"data": {},
		"expected": "<partial>",
		"partials": {
			"partial": "{{#wrap}}<partial>{{/wrap}}"
		},
		"helpers": {
			"wrap": {
				"!code": true,
				"javascript": "function (options) {\n        return new Handlebars.SafeString(options.fn());\n      }",
				"php": "function($options) {\n        return new \\Handlebars\\SafeString($options->fn());\n      }"
			}
		}
	},
	{
		"description": "Regressions",
		"it": "GH-1065: Sparse arrays",
		"template": "{{#each array}}{{@index}}{{.}}{{/each}}",
		"data": {
			"array": {
				"1": "foo",
				"3": "bar",
				"!sparsearray": true
			}
		},
		"expected": "1foo3bar"
	},
	{
		"description": "Regressions",
		"it": "should support multiple levels of inline partials",
		"template": "{{#> layout}}{{#*inline \"subcontent\"}}subcontent{{/inline}}{{/layout}}",
		"data": {},
		"expected": "doctypelayoutsubcontent",
		"partials": {
			"doctype": "doctype{{> content}}",
			"layout": "{{#> doctype}}{{#*inline \"content\"}}layout{{> subcontent}}{{/inline}}{{/doctype}}"
		}
	},
	{
		"description": "Regressions",
		"it": "GH-1089: should support failover content in multiple levels of inline partials",
		"template": "{{#> layout}}{{/layout}}",
		"data": {},
		"expected": "doctypelayoutsubcontent",
		"partials": {
			"doctype": "doctype{{> content}}",
			"layout": "{{#> doctype}}{{#*inline \"content\"}}layout{{#> subcontent}}subcontent{{/subcontent}}{{/inline}}{{/doctype}}"
		}
	},
	{
		"description": "Regressions",
		"it": "GH-1099: should support greater than 3 nested levels of inline partials",
		"template": "{{#> layout}}Outer{{/layout}}",
		"data": {},
		"expected": "Outer",
		"partials": {
			"layout": "{{#> inner}}Inner{{/inner}}{{> @partial-block }}",
			"inner": ""
		}
	},
	{
		"description": "Regressions",
		"it": "GH-1135 : Context handling within each iteration",
		"template": "{{#each array}}\n 1. IF: {{#if true}}{{../name}}-{{../../name}}-{{../../../name}}{{/if}}\n 2. MYIF: {{#myif true}}{{../name}}={{../../name}}={{../../../name}}{{/myif}}\n{{/each}}",
		"data": {
			"array": [
				1
			],
			"name": "John"
		},
		"expected": " 1. IF: John--\n 2. MYIF: John==\n",
		"helpers": {
			"myif": {
				"!code": true,
				"javascript": "function(conditional, options) {\n        if (conditional) {\n          return options.fn(this);\n        } else {\n          return options.inverse(this);\n        }\n      }",
				"php": "function($conditional, $options) {\n        if ($conditional) {\n          return $options->fn($options->scope);\n        } else {\n          return $options->inverse($options->scope);\n        }\n      }"
			}
		}
	},
	{
		"description": "Regressions",
		"it": "GH-1186: Support block params for existing programs",
		"template": "{{#*inline \"test\"}}{{> @partial-block }}{{/inline}}{{#>test }}{{#each listOne as |item|}}{{ item }}{{/each}}{{/test}}{{#>test }}{{#each listTwo as |item|}}{{ item }}{{/each}}{{/test}}",
		"data": {
			"listOne": [
				"a"
			],
			"listTwo": [
				"b"
			]
		},
		"expected": "ab"
	},
	{
		"description": "Regressions",
		"it": "GH-1319: \"unless\" breaks when \"each\" value equals \"null\"",
		"template": "{{#each list}}{{#unless ./prop}}parent={{../value}} {{/unless}}{{/each}}",
		"data": {
			"value": "parent",
			"list": [
				null,
				"a"
			]
		},
		"expected": "parent=parent parent=parent "
	},
	{
		"description": "Regressions",
		"it": "GH-1341: 4.0.7 release breaks {{#if @partial-block}} usage",
		"template": "template {{>partial}} template",
		"data": {},
		"expected": "template  block  partial  block  template",
		"partials": {
			"partialWithBlock": "{{#if @partial-block}} block {{> @partial-block}} block {{/if}}",
			"partial": "{{#> partialWithBlock}} partial {{/partialWithBlock}}"
		}
	},
	{
		"description": "Regressions",
		"it": "should allow hash with protected array names",
		"template": "{{helpa length=\"foo\"}}",
		"data": {
			"array": [
				1
			],
			"name": "John"
		},
		"expected": "foo",
		"helpers": {
			"helpa": {
				"!code": true,
				"javascript": "function(options) {\n        return options.hash.length;\n      }",
				"php": "function($options) {\n        return $options['hash']['length'];\n      }"
			}
		}
	},
	{
		"description": "Regressions - GH-1639: TypeError: Cannot read property 'apply' of undefined\" when handlebars version > 4.6.0 (undocumented, deprecated usage)",
		"it": "should treat undefined helpers like non-existing helpers",
		"template": "{{foo}}",
		"data": {
			"foo": "bar"
		},
		"expected": "bar"
	}
]