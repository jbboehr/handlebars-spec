[
	{
		"description": "data",
		"it": "passing in data to a compiled function that expects data - works with helpers",
		"template": "{{hello}}",
		"data": {
			"noun": "cat"
		},
		"expected": "happy cat",
		"runtimeOptions": {
			"data": {
				"adjective": "happy"
			}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return options.data.adjective + ' ' + this.noun;\n      }",
				"php": "function($options) {\n        return $options['data']['adjective'] . \" \"  . $options->scope['noun'];\n      }"
			}
		},
		"message": "Data output by helper"
	},
	{
		"description": "data",
		"it": "data can be looked up via @foo",
		"template": "{{@hello}}",
		"data": {},
		"expected": "hello",
		"runtimeOptions": {
			"data": {
				"hello": "hello"
			}
		},
		"message": "@foo retrieves template data"
	},
	{
		"description": "data",
		"it": "deep @foo triggers automatic top-level data",
		"template": "{{#let world=\"world\"}}{{#if foo}}{{#if foo}}Hello {{@world}}{{/if}}{{/if}}{{/let}}",
		"data": {
			"foo": true
		},
		"expected": "Hello world",
		"helpers": {
			"let": {
				"!code": true,
				"javascript": "function (options) {\n        var frame = Handlebars.createFrame(options.data);\n        for (var prop in options.hash) {\n          if (prop in options.hash) {\n            frame[prop] = options.hash[prop];\n          }\n        }\n        return options.fn(this, {data: frame});\n      }",
				"php": "function($options) {\n        $frame = Utils::createFrame($options['data']);\n        foreach( $options['hash'] as $prop => $v ) {\n          $frame[$prop] = $options['hash'][$prop];\n        }\n        return $options->fn($options->scope, array(\"data\" => $frame));\n      }"
			}
		},
		"message": "Automatic data was triggered"
	},
	{
		"description": "data",
		"it": "parameter data can be looked up via @foo",
		"template": "{{hello @world}}",
		"data": {},
		"expected": "Hello world",
		"runtimeOptions": {
			"data": {
				"world": "world"
			}
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (noun) {\n        return 'Hello ' + noun;\n      }",
				"php": "function($noun) { return \"Hello \" . ($noun === null ? 'undefined' : $noun); }"
			}
		},
		"message": "@foo as a parameter retrieves template data"
	},
	{
		"description": "data",
		"it": "hash values can be looked up via @foo",
		"template": "{{hello noun=@world}}",
		"data": {},
		"expected": "Hello world",
		"runtimeOptions": {
			"data": {
				"world": "world"
			}
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return 'Hello ' + options.hash.noun;\n      }",
				"php": "function($options) { return \"Hello \" . $options['hash']['noun']; }"
			}
		},
		"message": "@foo as a parameter retrieves template data"
	},
	{
		"description": "data",
		"it": "nested parameter data can be looked up via @foo.bar",
		"template": "{{hello @world.bar}}",
		"data": {},
		"expected": "Hello world",
		"runtimeOptions": {
			"data": {
				"world": {
					"bar": "world"
				}
			}
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (noun) {\n        return 'Hello ' + noun;\n      }",
				"php": "function($noun) { return \"Hello \" . ($noun === null ? 'undefined' : $noun); }"
			}
		},
		"message": "@foo as a parameter retrieves template data"
	},
	{
		"description": "data",
		"it": "nested parameter data does not fail with @world.bar",
		"template": "{{hello @world.bar}}",
		"data": {},
		"expected": "Hello undefined",
		"runtimeOptions": {
			"data": {
				"foo": {
					"bar": "world"
				}
			}
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (noun) {\n        return 'Hello ' + noun;\n      }",
				"php": "function($noun) { return \"Hello \" . ($noun === null ? 'undefined' : $noun); }"
			}
		},
		"message": "@foo as a parameter retrieves template data"
	},
	{
		"description": "data",
		"it": "parameter data throws when using complex scope references",
		"template": "{{#goodbyes}}{{text}} cruel {{@foo/../name}}! {{/goodbyes}}",
		"data": {},
		"exception": true
	},
	{
		"description": "data",
		"it": "data can be functions",
		"template": "{{@hello}}",
		"data": {},
		"expected": "hello",
		"runtimeOptions": {
			"data": {
				"hello": {
					"!code": true,
					"javascript": "function () { return 'hello'; }",
					"php": "function() { return 'hello'; }"
				}
			}
		}
	},
	{
		"description": "data",
		"it": "data can be functions with params",
		"template": "{{@hello \"hello\"}}",
		"data": {},
		"expected": "hello",
		"runtimeOptions": {
			"data": {
				"hello": {
					"!code": true,
					"javascript": "function (arg) { return arg; }",
					"php": "function($arg) { return $arg; }"
				}
			}
		}
	},
	{
		"description": "data",
		"it": "data is inherited downstream",
		"template": "{{#let foo=1 bar=2}}{{#let foo=bar.baz}}{{@bar}}{{@foo}}{{/let}}{{@foo}}{{/let}}",
		"data": {
			"bar": {
				"baz": "hello world"
			}
		},
		"expected": "2hello world1",
		"runtimeOptions": {
			"data": {}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"let": {
				"!code": true,
				"javascript": "function (options) {\n        var frame = Handlebars.createFrame(options.data);\n        for (var prop in options.hash) {\n          if (prop in options.hash) {\n            frame[prop] = options.hash[prop];\n          }\n        }\n        return options.fn(this, {data: frame});\n      }",
				"php": "function($options) {\n        $frame = Utils::createFrame($options['data']);\n        foreach( $options['hash'] as $prop => $v ) {\n          $frame[$prop] = $options['hash'][$prop];\n        }\n        return $options->fn($options->scope, array(\"data\" => $frame));\n      }"
			}
		},
		"message": "data variables are inherited downstream"
	},
	{
		"description": "data",
		"it": "passing in data to a compiled function that expects data - works with helpers in partials",
		"template": "{{>myPartial}}",
		"data": {
			"noun": "cat"
		},
		"expected": "happy cat",
		"runtimeOptions": {
			"data": {
				"adjective": "happy"
			}
		},
		"compileOptions": {
			"data": true
		},
		"partials": {
			"myPartial": "{{hello}}"
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return options.data.adjective + ' ' + this.noun;\n      }",
				"php": "function($options) {\n        return $options['data']['adjective'] . \" \"  . $options->scope['noun'];\n      }"
			}
		},
		"message": "Data output by helper inside partial"
	},
	{
		"description": "data",
		"it": "passing in data to a compiled function that expects data - works with helpers and parameters",
		"template": "{{hello world}}",
		"data": {
			"exclaim": true,
			"world": "world"
		},
		"expected": "happy world!",
		"runtimeOptions": {
			"data": {
				"adjective": "happy"
			}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (noun, options) {\n        return options.data.adjective + ' ' + noun + (this.exclaim ? '!' : '');\n      }",
				"php": "function($noun, $options) {\n        return $options['data']['adjective'] . \" \"  . $noun . ($options->scope['exclaim'] ? \"!\" : \"\");\n      }"
			}
		},
		"message": "Data output by helper"
	},
	{
		"description": "data",
		"it": "passing in data to a compiled function that expects data - works with block helpers",
		"template": "{{#hello}}{{world}}{{/hello}}",
		"data": {
			"exclaim": true
		},
		"expected": "happy world!",
		"runtimeOptions": {
			"data": {
				"adjective": "happy"
			}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return options.fn(this);\n      }",
				"php": "function($options) {\n        return $options->fn($options->scope);\n      }"
			},
			"world": {
				"!code": true,
				"javascript": "function (options) {\n        return options.data.adjective + ' world' + (this.exclaim ? '!' : '');\n      }",
				"php": "function($options) {\n        return $options['data']['adjective'] . \" world\" . ($options->scope['exclaim'] ? \"!\" : \"\");\n      }"
			}
		},
		"message": "Data output by helper"
	},
	{
		"description": "data",
		"it": "passing in data to a compiled function that expects data - works with block helpers that use ..",
		"template": "{{#hello}}{{world ../zomg}}{{/hello}}",
		"data": {
			"exclaim": true,
			"zomg": "world"
		},
		"expected": "happy world?",
		"runtimeOptions": {
			"data": {
				"adjective": "happy"
			}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return options.fn({exclaim: '?'});\n      }",
				"php": "function($options) {\n        return $options->fn(array(\"exclaim\" => \"?\"));\n      }"
			},
			"world": {
				"!code": true,
				"javascript": "function (thing, options) {\n        return options.data.adjective + ' ' + thing + (this.exclaim || '');\n      }",
				"php": "function($thing, $options) {\n        return $options['data']['adjective'] . \" \" . $thing . ($options->scope['exclaim'] ?: \"\");\n      }"
			}
		},
		"message": "Data output by helper"
	},
	{
		"description": "data",
		"it": "passing in data to a compiled function that expects data - data is passed to with block helpers where children use ..",
		"template": "{{#hello}}{{world ../zomg}}{{/hello}}",
		"data": {
			"exclaim": true,
			"zomg": "world"
		},
		"expected": "#win happy world?",
		"runtimeOptions": {
			"data": {
				"adjective": "happy",
				"accessData": "#win"
			}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return options.data.accessData + ' ' + options.fn({exclaim: '?'});\n      }",
				"php": "function($options) {\n        return $options['data']['accessData'] . \" \" . $options->fn(array(\"exclaim\" => \"?\"));\n      }"
			},
			"world": {
				"!code": true,
				"javascript": "function (thing, options) {\n        return options.data.adjective + ' ' + thing + (this.exclaim || '');\n      }",
				"php": "function($thing, $options) {\n        return $options['data']['adjective'] . \" \" . $thing . ($options->scope['exclaim'] ?: \"\");\n      }"
			}
		},
		"message": "Data output by helper"
	},
	{
		"description": "data",
		"it": "you can override inherited data when invoking a helper",
		"template": "{{#hello}}{{world zomg}}{{/hello}}",
		"data": {
			"exclaim": true,
			"zomg": "planet"
		},
		"expected": "sad world?",
		"runtimeOptions": {
			"data": {
				"adjective": "happy"
			}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return options.fn({exclaim: '?', zomg: 'world'}, { data: {adjective: 'sad'} });\n      }",
				"php": "function($options) {\n        return $options->fn(array(\"exclaim\" => \"?\", \"zomg\" => \"world\"), array(\"data\" => array(\"adjective\" => \"sad\")));\n      }"
			},
			"world": {
				"!code": true,
				"javascript": "function (thing, options) {\n        return options.data.adjective + ' ' + thing + (this.exclaim || '');\n      }",
				"php": "function($thing, $options) {\n        return $options['data']['adjective'] . \" \" . $thing . ($options->scope['exclaim'] ?: \"\");\n      }"
			}
		},
		"message": "Overriden data output by helper"
	},
	{
		"description": "data",
		"it": "you can override inherited data when invoking a helper with depth",
		"template": "{{#hello}}{{world ../zomg}}{{/hello}}",
		"data": {
			"exclaim": true,
			"zomg": "world"
		},
		"expected": "sad world?",
		"runtimeOptions": {
			"data": {
				"adjective": "happy"
			}
		},
		"compileOptions": {
			"data": true
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (options) {\n        return options.fn({exclaim: '?'}, { data: {adjective: 'sad'} });\n      }",
				"php": "function($options) {\n        return $options->fn(array(\"exclaim\" => \"?\"), array(\"data\" => array(\"adjective\" => \"sad\")));\n      }"
			},
			"world": {
				"!code": true,
				"javascript": "function (thing, options) {\n        return options.data.adjective + ' ' + thing + (this.exclaim || '');\n      }",
				"php": "function($thing, $options) {\n        return $options['data']['adjective'] . \" \" . $thing . ($options->scope['exclaim'] ?: \"\");\n      }"
			}
		},
		"message": "Overriden data output by helper"
	},
	{
		"description": "data - @root",
		"it": "the root context can be looked up via @root",
		"template": "{{@root.foo}}",
		"data": {
			"foo": "hello"
		},
		"expected": "hello",
		"runtimeOptions": {
			"data": {}
		}
	},
	{
		"description": "data - @root",
		"it": "the root context can be looked up via @root",
		"number": "01",
		"template": "{{@root.foo}}",
		"data": {
			"foo": "hello"
		},
		"expected": "hello"
	},
	{
		"description": "data - @root",
		"it": "passed root values take priority",
		"template": "{{@root.foo}}",
		"data": {},
		"expected": "hello",
		"runtimeOptions": {
			"data": {
				"root": {
					"foo": "hello"
				}
			}
		}
	},
	{
		"description": "data - nesting",
		"it": "the root context can be looked up via @root",
		"template": "{{#helper}}{{#helper}}{{@./depth}} {{@../depth}} {{@../../depth}}{{/helper}}{{/helper}}",
		"data": {
			"foo": "hello"
		},
		"expected": "2 1 0",
		"runtimeOptions": {
			"data": {
				"depth": 0
			}
		},
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function (options) {\n            var frame = Handlebars.createFrame(options.data);\n            frame.depth = options.data.depth + 1;\n            return options.fn(this, {data: frame});\n          }",
				"php": "function($options) {\n            $frame = Utils::createFrame($options['data']);\n            $frame['depth'] = $options['data']['depth'] + 1;\n            return $options->fn($options->scope, array(\"data\" => $frame));\n          }"
			}
		}
	}
]