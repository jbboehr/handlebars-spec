{
	"helpers-helper with complex lookup$-00": {
		"helpers": {
			"link": {
				"php": "function($prefix, $context) { return \"<a href='{$prefix}/{$context['url']}'>{$context['text']}</a>\"; }"
			}
		}
	},
	"helpers-helper for raw block gets raw content-00": {
		"helpers": {
			"raw": {
				"php": "function($options) { return $options['fn'](); }"
			}
		}
	},
	"helpers-helper block with complex lookup expression-00": {
		"helpers": {
			"goodbyes": {
				"php": "function($context, $scope, $options) {\n $byes = ['Goodbye', 'goodbye', 'GOODBYE'];\n foreach ($byes as $bye) {\n echo $bye.' ';\n $options['fn']($context, $scope);\n echo '! ';\n }\n}"
			}
		}
	},
	"helpers-helper with complex lookup and nested template-00": {
		"helpers": {
			"link": {
				"php": "function($prefix, $context, $options) { echo \"<a href='{$prefix}/{$context['url']}'>\"; $options['fn']($context, $scope); echo \"</a>\"; }"
			}
		}
	},
	"helpers-helper with complex lookup and nested template in vm+compiler-00": {
		"helpers": {
			"link": {
				"php": "function($prefix, $context, $options) { echo \"<a href='{$prefix}/{$context['url']}'>\"; $options['fn']($context, $scope); echo \"</a>\"; }"
			}
		}
	},
	"helpers-block helper-00": {
		"helpers": {
			"goodbyes": {
				"php": "function($scope, $options) { $options['fn'](['text' => 'GOODBYE'], $scope); }"
			}
		}
	},
	"helpers-block helper staying in the same context-00": {
		"helpers": {
			"form": {
				"php": "function($context, $scope, $options) { echo '<form>'; $options['fn']($context, $scope); echo '</form>'; }"
			}
		}
	},
	"helpers-block helper should have context in this-00": {
		"helpers": {
			"link": {
				"php":
						"function($context, $scope, $options) {\n    echo '<a href=\"\/people\/'.$context['id'].'\">';\n    $options['fn']($context, $scope);\n    echo '<\/a>';\n}"
			}
		}
	},
	"helpers-block helper passing a new context-00": {
		"helpers": {
			"form": {
				"php": "function($context, $scope, $options) {\n    echo '<form>';\n    $options['fn']($context, $scope);\n    echo '<\/form>';\n}"
			}
		}
	},
	"helpers-block helper passing a complex path context-00": {
		"helpers": {
			"form": {
				"php": "function($context, $scope, $options) {\n    echo '<form>';\n    $options['fn']($context, $scope);\n    echo '<\/form>';\n}"
			}
		}
	},
	"helpers-nested block helpers-00": {
		"helpers": {
			"form": {
				"php": "function($context, $scope, $options) {\n    echo '<form>';\n    $options['fn']($context, $scope);\n    echo '<\/form>';\n}"
			},
			"link": {
				"php":
						"function($context, $scope, $options) {\n    echo \"<a href='\".$context['name'].\"'>\";\n    $options['fn']($context, $scope);\n    echo '<\/a>';\n}"
			}
		}
	},
	"helpers-block helper inverted sections-00": {
		"helpers": {
			"list": {
				"php": "function($context, $prev, $scope, $options) {\n    if (count($context) > 0) {\n        echo '<ul>';\n        foreach ($context as $row) {\n            echo '<li>';\n            $options['fn']($row, $scope);\n            echo '<\/li>';\n        }\n        echo '<\/ul>';\n    } elseif (isset($options['inverse'])) {\n        echo '<p>';\n        $options['inverse']($prev, $scope);\n        echo '<\/p>';\n    }\n}"
			}
		}
	},
	"helpers-block helper inverted sections-01": {
		"helpers": {
			"list": {
				"php": "function($context, $prev, $scope, $options) {\n    if (count($context) > 0) {\n        echo '<ul>';\n        foreach ($context as $row) {\n            echo '<li>';\n            $options['fn']($row, $scope);\n            echo '<\/li>';\n        }\n        echo '<\/ul>';\n    } elseif (isset($options['inverse'])) {\n        echo '<p>';\n        $options['inverse']($prev, $scope);\n        echo '<\/p>';\n    }\n}"
			}
		}
	},
	"helpers-block helper inverted sections-02": {
		"helpers": {
			"list": {
				"php": "function($context, $prev, $scope, $options) {\n    if (count($context) > 0) {\n        echo '<ul>';\n        foreach ($context as $row) {\n            echo '<li>';\n            $options['fn']($row, $scope);\n            echo '<\/li>';\n        }\n        echo '<\/ul>';\n    } elseif (isset($options['inverse'])) {\n        echo '<p>';\n        $options['inverse']($prev, $scope);\n        echo '<\/p>';\n    }\n}"
			}
		}
	},
	"helpers hash-providing a helpers hash-00": {
		"helpers": {
			"world": {
				"php": "function() { return 'world'; }"
			}
		}
	},
	"helpers hash-providing a helpers hash-01": {
		"helpers": {
			"world": {
				"php": "function() { return 'world'; }"
			}
		}
	},
	"helpers hash-in cases of conflict, helpers win-00": {
		"helpers": {
			"lookup": {
				"php": "function() { return 'helpers'; }"
			}
		}
	},
	"helpers hash-in cases of conflict, helpers win-01": {
		"helpers": {
			"lookup": {
				"php": "function() { return 'helpers'; }"
			}
		}
	}

	,
	"helpers hash-the helpers hash is available is nested contexts-00": {
		"helpers": {
			"helper": {
				"php": "function() { return 'helper'; }"
			}
		}
	},
	"helpers hash-the helper hash should augment the global hash-00": {
		"helpers": {
			"test_helper": {
				"php": "function() { return 'found it!'; }"
			},
			"world": {
				"php": "function() { return 'world!'; }"
			}
		}
	},
	"helpers hash-multiple global helper registration-00": {
		"helpers": {
			"test_helper": {
				"php": "function() { return 'found it!'; }"
			},
			"world": {
				"php": "function() { return 'world!'; }"
			}
		}
	},
	"helpers hash-decimal number literals work-00": {
		"helpers": {
			"hello": {
				"php": "function($times, $times2) {\n    if (!is_numeric($times)) {\n        $times = 'NaN';\n    }\n    if (!is_numeric($times2)) {\n        $times2 = \"NaN\";\n    }\n    return \"Hello $times $times2 times\";\n}"
			}
		}
	},
	"helpers hash-negative number literals work-00": {
		"helpers": {
			"hello": {
				"php": "function($times) {\n    if(!is_numeric($times)) {\n        $times = \"NaN\";\n    }\n    return \"Hello $times times\";\n}"
			}
		}
	},
	"string literal parameters-simple literals work-00": {
		"helpers": {
			"hello": {
				"php": "function($param, $times, $bool1, $bool2) {\n    if(!is_numeric($times)) { $times = \"NaN\"; }\n    if(!is_bool($bool1)) {\n        $bool1 = \"NaB\";\n    } else {\n        $bool1 = \\Snidely\\Helpers::jstr($bool1);\n    }\n    if(!is_bool($bool2)) {\n        $bool2 = \"NaB\";\n    } else {\n        $bool2 = \\Snidely\\Helpers::jstr($bool2);\n    }\n\n    return \"Hello $param $times times: $bool1 $bool2\";\n}"
			}
		}
	},
	"string literal parameters-using a quote in the middle of a parameter raises an error-00": {
		"helpers": {
			"hello": {
				"php": "function() { return ''; }"
			}
		}
	},
	"string literal parameters-escaping a string is possible-00": {
		"helpers": {
			"hello": {
				"php": "function($param) { return 'Hello '.$param; }"
			}
		}
	},
	"string literal parameters-negative number literals work-00": {
		"helpers": {
			"hello": {
				"php": "function($times) {\n    if(!is_numeric($times)) {\n        $times = \"NaN\";\n    }\n    return \"Hello $times times\";\n}"
			}
		}
	},
	"multiple parameters-simple multi-params work-00": {
		"helpers": {
			"goodbye": {
				"php": "function($cruel, $world) { return 'Goodbye ' . $cruel . ' ' . $world; }"
			}
		}
	},
	"multiple parameters-block multi-params work-00": {
		"helpers": {
			"goodbye": {
				"php": "function($cruel, $world, $scope, $options) {\n    $options['fn'](['greeting' => 'Goodbye', 'adj' => 'cruel', 'noun' => 'world'], $scope);\n}"
			}
		}
	},
	"hash-helpers can take an optional hash-00": {
		"helpers": {
			"goodbye": {
				"php": "function($options) {\n    $r = 'GOODBYE ';\n    $r .= $options['hash']['cruel'].' ';\n    $r .= $options['hash']['world'].' ';\n    $r .= $options['hash']['times'].' TIMES';\n\n    return $r;\n}"
			}
		}
	},
	"hash-helpers can take an optional hash with booleans-00": {
		"helpers": {
			"goodbye": {
				"php": "function($options) {\n    if ($options['hash']['print'] === true) {\n        return \"GOODBYE {$options['hash']['cruel']} {$options['hash']['world']}\";\n    } elseif ($options['hash']['print'] === false) {\n        return \"NOT PRINTING\";\n    } else {\n        return \"THIS SHOULD NOT HAPPEN\";\n    }\n}"
			}
		}
	},
	"hash-helpers can take an optional hash with booleans-01": {
		"helpers": {
			"goodbye": {
				"php": "function($options) {\n    if ($options['hash']['print'] === true) {\n        return \"GOODBYE {$options['hash']['cruel']} {$options['hash']['world']}\";\n    } elseif ($options['hash']['print'] === false) {\n        return \"NOT PRINTING\";\n    } else {\n        return \"THIS SHOULD NOT HAPPEN\";\n    }\n}"
			}
		}
	},
	"hash-block helpers can take an optional hash-00": {
		"helpers": {
			"goodbye": {
				"php": "function($context, $scope, $options) {\n    echo \"GOODBYE {$options['hash']['cruel']} \";\n    $options['fn']($context, $scope);\n    echo \" {$options['hash']['times']} TIMES\";\n}"
			}
		}
	},
	"hash-block helpers can take an optional hash with single quoted stings-00": {
		"helpers": {
			"goodbye": {
				"php": "function($context, $scope, $options) {\n    echo \"GOODBYE {$options['hash']['cruel']} \";\n    $options['fn']($context, $scope);\n    echo \" {$options['hash']['times']} TIMES\";\n}"
			}
		}
	},
	"hash-block helpers can take an optional hash with booleans-00": {
		"helpers": {
			"goodbye": {
				"php": "function($context, $scope, $options) {\n    if ($options['hash']['print'] === true) {\n        echo \"GOODBYE {$options['hash']['cruel']} \";\n        $options['fn']($context, $scope);\n    } elseif ($options['hash']['print'] === false) {\n        echo \"NOT PRINTING\";\n    } else {\n        echo \"THIS SHOULD NOT HAPPEN\";\n    }\n}"
			}
		}
	},
	"hash-block helpers can take an optional hash with booleans-01": {
		"helpers": {
			"goodbye": {
				"php": "function($context, $scope, $options) {\n    if ($options['hash']['print'] === true) {\n        echo \"GOODBYE {$options['hash']['cruel']} \";\n        $options['fn']($context, $scope);\n    } elseif ($options['hash']['print'] === false) {\n        echo \"NOT PRINTING\";\n    } else {\n        echo \"THIS SHOULD NOT HAPPEN\";\n    }\n}"
			}
		}
	}
}
